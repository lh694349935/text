
（1）  J2EE是Java2企业平台版，是一种不同于传统应用开发的技术架构，是一种技术规范和指南，其中所含有的各类组件、服务架构及技术层次，都有共同的标准和规格，使得各种依赖J2EE的不同平台之间存在良好的兼容性。J2EE的组件优势在于：利用已有的企业信息系统方面的投资，保留现存的的IT资产，形成一个以渐进的方式建立在已有的系统之上的服务器平台；J2EE允许公司把一些复杂的、琐碎的服务端任务交给中间供应商完成，例如状态管理服务、持续性服务，以便开发人员可以集中精力在如何创建商务逻辑上，缩短开发时间；基于J2EE的应用程序不依赖任何特定操作系统、中间件和硬件的特点，J2EE能够开发部署在异构环境中的可抑制程序。
    J2EE使用多层的分布式应用模型（应用程序分布在不同计算机上，通过网络来共同完成一项任务的工作方式），应用逻辑按功能划分为组件，各个应用组件根据他们所在的层分布在不同的机器上。J2EE经典的四层结构包括：运行在客户端机器上的客户层组件；运行在J2EE服务器上的Web层组件（JSP页面或Servlets）；运行在J2EE服务器上的业务逻辑层组件（用于做一些有效性验证的工作，以更好地保证程序运行的健壮性。）；运行在EIS服务器上（主管信息系统，服务于组织的高层经理的一类的特殊的信息系统）的企业信息系统（Enterprise information system）层软件（ERP或数据库等）。
    MVC（Model-View-Controller）是一个设计模式，它把应用程序分成三个核心模块:模型、视图、控制器，它们各自处理自己的任务，使得应用程序的输入、处理和输出强制性分开，软件可维护性、可扩展性、灵活性以及封装性得到提高。视图是用户看到并与之交互的界面，可以向用户显示相关的数据，接受用户的输入，视图向模型查询业务状态，接受模型发出的数据更新事件，从而对用户界面进行同步更新。模型是应用程序的主体部分，模型表示业务数据和业务逻辑，一个模型能为多个视图提供数据，应用于模型的代码只用写一次就可以被多个视图重用。控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器接收请求并决定调用哪个模型组件去处理请求，然后决定调用哪个视图来显示模型处理返回的数据。MVC不适合小型应用程序，但对于开发存在大量用户界面，并且逻辑业务复杂的大型应用程序，MVC将会使软件在健壮性、代码重用和结构方面上一个新的台阶。
（2）  Struts框架具有组件的模块化、灵活性和重用性的特点，简化了基于MVC的Web应用程序的开发。Struts可以清晰地区分控制，事务逻辑和外观，从而简化了开发应用程序的过程，Struts提供的类使得开发工作更加简单，这些类包括：实现和执行程序事务逻辑的类。       
　　Struts 2是Struts的下一代产品，是在Struts和Web Work的技术基础上进行了合并，形成的全新的Struts 2框架。Struts 2以Web Work为核心，采用拦截器的机制来处理用户的需求，这样的设计使得事务逻辑控制器能与Servlet API完全脱离开，因此可以将Struts理解为Web Work的更新产品。Struts框架把View组件接收到的用户输入表单数据保存在Action Form Bean中，把它传递给Controller组件，Controller组件可以对Action Form Bean中的数据进行修改。在Action的实现方面不要求必须扩展自身Action类，可以是一个普通的POJO（POJO的内在含义是指那些从没有任何类继承、也没有实现任何接口，更没有被其他框架侵入的Java对象。）
（3） Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象包装（因为Hibernate操作的是纯粹的Java类，没有实现任何接口，也没有任何侵入性），使得Java程序员可以使用对象编程思维来操纵数据库。
Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端使用，也可以在Servlet/JSP的Web应用中使用。Hibernate封装了JDBC，简化了很多重复的代码，而且它的移植性好，支持各种数据库，如果需要换一个数据库只要在配置文件中变换配置即可。
　　Hibernate不适合数据库模式不规范，约束不完整，需要大量复杂查询的系统，同时Hibernate的学习成本较高，完全掌握也较困难，风险较大。但是，如果使用的是富对象模型，而且想要灵活、轻松且高效地保存它（无论是否正要开始或已经决定使用关系数据库，只要这是一个选择――而且存在可用的优秀免费数据库，比如MySQL），那么Hibernate很可能就是理想的选择
（4） Spring提供了一个细致完整的MVC框架，该框架为模型、视图、控制器之间提供了非常清晰的划分，各部分耦合性极低。Spring的MVC完全基于接口编程，与视图无关。只要能够实现View接口，视图不再强制使用JSP，可以使用其他视图或者自定义的视图机制。Spring MVC框架以Dispatcher Servlet（前置控制器，配置在web.xml文件中）为核心控制器，该控制器负责拦截用户的所有请求，将请求发送到对应的业务控制器。
　　Spring MVC包括处理器映射、视图解析、信息国际化、文件上传等，所有控制器都必须实现Controller接口，通过该接口来实现用户的业务逻辑控制器。
Spring框架提供了对Hibernate的封装，使Hibernate的使用变得简单了点

